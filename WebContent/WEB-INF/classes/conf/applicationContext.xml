<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="

	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


	<!-- 装载属性配置文件-->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/conf/db.properties</value>
				<value>classpath*:/conf/memcache.properties</value>
				<value>classpath*:/conf/redis.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">

		<property name="driverClassName" value="${jdbc.connection.driver_class}" />
		<property name="url" value="${jdbc.connection.url}" />
		<property name="username" value="${jdbc.connection.username}" />
		<property name="password" value="${jdbc.connection.password}" />

		<property name="defaultAutoCommit" value="${jdbc.druid.defaultAutoCommit}" />
		<property name="filters" value="${jdbc.druid.filters}" />
		<property name="maxActive" value="${jdbc.druid.maxActive}" />
		<property name="initialSize" value="${jdbc.druid.initialSize}" />
		<property name="maxWait" value="${jdbc.druid.maxWait}" />
		<property name="minIdle" value="${jdbc.druid.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.druid.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.druid.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.druid.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.druid.testWhileIdle}" />

		<property name="testOnBorrow" value="${jdbc.druid.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.druid.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${jdbc.druid.maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${jdbc.druid.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.druid.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${jdbc.druid.logAbandoned}" />
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>

				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.max_fetch_depth">
					${hibernate.max_fetch_depth}
				</prop>
				<prop key="hibernate.jdbc.fetch_size">
					${hibernate.jdbc.fetch_size}
				</prop>
				<prop key="hibernate.jdbc.batch_size">
					${hibernate.jdbc.batch_size}
				</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">
					${hibernate.bytecode.use_reflection_optimizer}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">
					${hibernate.hbm2dll}
				</prop>
				<prop key="hibernate.format_sql">
				    ${hibernate.format_sql}
				</prop>
				<prop key="hibernate.c3p0.max_statements">
				    ${hibernate.c3p0.max_statements}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop> <!-- 自动根据PO更新表结构 -->
				<prop key="hibernate.autoReconnect">true</prop>
        		<prop key="hibernate.connection.release_mode">after_transaction</prop>
			</props>
		</property>
		<!-- spring2.5.6才packagesToScan有属性  2.5.5使用annotatedClasses属性-->
		<property name="packagesToScan" value="com.mh" />
	</bean>

	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>


	<!-- 自动搜索@Component , @Service , @Repository等标注的类 不搜索@Controller的类 -->
	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在springMVC-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.mh" annotation-config="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
   	</bean>

   	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
   	</bean>
	<!-- 注放ApplicationContext实例 -->
	<bean id="springContextHolder" class="com.mh.commons.utils.SpringContextHolder" lazy-init="false" />
	<!-- token管理器 -->
	<bean id="formTokenManagerImpl" class="com.mh.web.token.impl.FormTokenManagerImpl" />


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="txPointcut" expression="!execution(* com.mh.service.*.updateEdu(..)) and execution(* com.mh.service.*.*(..))"/>
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>


  <!-- Kaptcha验证码生成器 -->
    <bean name="producer" class="com.google.code.kaptcha.impl.DefaultKaptcha" scope="singleton">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!-- 是否有边框 -->
                        <prop key="kaptcha.border">no</prop>
                        <!-- 字体颜色  -->
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                        <!-- 干扰线颜色 -->
                        <prop key="kaptcha.noise.color">red</prop>
                        <!--  -->
                        <prop key="kaptcha.textproducer.char.space">4</prop>
                        <!--  -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <!-- 生成验证码字符串范围 -->
                        <prop key="kaptcha.textproducer.char.string">123456789</prop>
                        <!-- 字体大小 -->
                        <prop key="kaptcha.textproducer.font.size">41</prop>
                        <!-- 验证码宽度  -->
                        <prop key="kaptcha.image.width">117</prop>
                        <!-- 验证码高度 -->
                        <prop key="kaptcha.image.height">50</prop>
                        <!-- 设置字体样式 -->
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

	<import resource="classpath*:conf/cache/cp_memcached_beans.xml"/>
	<import resource="classpath*:conf/cache/flat_memcached_beans.xml"/>
	<import resource="classpath*:conf/cache/member_memcached_beans.xml"/>
	<import resource="classpath*:conf/cache/sport_memcached_beans.xml"/>
	<import resource="classpath*:conf/cache/redis_beans.xml"/>
</beans>